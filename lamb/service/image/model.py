# -*- coding: utf-8 -*-
__author__ = 'KoNEW'


from sqlalchemy import Column
from sqlalchemy.dialects.mysql import BIGINT, TEXT, VARCHAR
from lamb.db import DeclarativeBase
from lamb.db.mixins import TableConfigMixin


__all__ = [
    'LambImage'
]


class LambImage(DeclarativeBase, TableConfigMixin):
    """ Class provide database model for store images

    Class store information about image_id and several urls for different size of image.

    Can be subclassed with SQLAlchemy joined policy of polymorphic identity.
    Default polymorphic_identity is 'common_image'.

    Note:

        Use table named `nm_service_image` for store records.

    Attributes:

        image_id (long): Database id of record, do not set directly, it is generated by auto_increment in database.
        thumb_url (Optional[str]): Should store URL of thumbnail for image (cropped to square), may be null
        small_url (Optional[str]): Should store URL of small copy for image, may be null
        middle_url (Optional[str]): Should store URL of middle copy for image, may be null
        large_url (Optional[str]): Should store URL of large copy for image, may be null
        original_url (Optional[str]): Should store URL of original copy for image, may be null
        polymorphic_type (str): Internal variable, used to store polymorphic identity, do not set directly
    """

    # columns
    image_id = Column(BIGINT(unsigned=True), primary_key=True, nullable=False, autoincrement=True)
    thumb_url = Column(TEXT())
    small_url = Column(TEXT())
    middle_url = Column(TEXT())
    large_url = Column(TEXT())
    original_url = Column(TEXT())
    polymorphic_type = Column(VARCHAR(50), nullable=False)

    # meta information
    __tablename__ = 'lamb_service_image'
    __mapper_args__ = {
        'polymorphic_identity': 'common_image',
        'polymorphic_on': polymorphic_type
    }
